{
    "t-includes": {
        "prefix": "t-includes",
        "body": [
            "#include <stdlib.h>",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <fcntl.h>",
            "#include <sys/wait.h>",
            "#include <sys/stat.h>",
            "#include <ctype.h>",
            "",
            "$0"
        ]
    },
    "t-main": {
        "prefix": "t-main",
        "body": [
            "int main(int argc, char** argv)",
            "{",
            "\t$1",
            "\t",
            "\t// Uscita corretta dal programma",
            "\texit(0);",
            "}"
        ]
    },
    "t-comment": {
        "prefix": "t-comment",
        "body": [
            "/* $1 */",
            "$0"
        ]
    },
    "t-debug: process": {
        "prefix": "t-debug: process",
        "body": [
            "printf(\"DEBUG-Esecuzione processo ${1:PADRE} con PID = %d\\n\", getpid());",
            "$0"
        ]
    },
    "t-control: parameters": {
        "prefix": "t-control: parameters",
        "body": [
            "//Controllo sul numero di parametri",
			"if (argc ${1:<} ${2:n}){",
            "\tprintf(\"Numero di parametri errato: argc = %d, ma dovrebbe essere >= ${3:n}\\n\", argc);",
            "\texit(${4: });",
            "}",
            "",
            "//Salvataggio del numero parametri passati da linea di comando",
            "int ${5:N} = argc - 1;",
            "$0"
        ]
    },
    "t-pipe: base": {
        "prefix": "t-pipe: base",
        "body": [
            "// Creazione di una pipe per consentire la comunicazione ${1:padre}-${2:figlio} e controllo esito",
            "if ((pipe(${3:p})) < 0)",
            "{",
            "\tprintf(\"Errore nella creazione della pipe.\\n\");",
            "\texit(${4: });",
            "}",
            "$0"
        ]
    },
    "t-pipe: pipe_t": {
        "prefix": "t-pipe: pipe_t",
        "body": [
			"// Definizione del TIPO pipe_t come array di 2 interi",
            "typedef int pipe_t[2];",
            "$0"
        ]
    },
	"t-pipe: malloc": {
        "prefix": "t-pipe: malloc",
        "body": [
            "// Allocazione della memoria per array di pipe e controllo esito",
            "pipe_t* ${1:piped} = malloc(${2:N}*sizeof(pipe_t));",
			"if (${1:piped} == NULL)",
            "{",
            "\tprintf(\"Errore in malloc.\\n\");",
            "\texit(${3: });",
            "}",
            "$0"
        ]
    },
    "t-pipe: calloc": {
        "prefix": "t-pipe: calloc",
        "body": [
            "// Allocazione della memoria per array di pipe e controllo esito",
            "pipe_t* ${1:piped} = calloc(${2:N}, sizeof(pipe_t));",
			"if (${1:piped} == NULL)",
            "{",
            "\tprintf(\"Errore in calloc.\\n\");",
            "\texit(${3: });",
            "}",
            "$0"
        ]
    },
    "t-pipe: generate-list": {
        "prefix": "t-pipe: generate-list",
        "body": [
            "// Creazione dei canali di pipe ${1:padre}-${2:figlio} e controllo esito",
            "for(int ${3:i} = 0; ${3:i} < N; ${3:i}++)",
            "{",
			"\tif ((pipe(piped[${3:i}])) < 0){",
            "\t\tprintf(\"Errore nella creazione della pipe.\\n\");",
            "\t\texit(${4: });",
			"\t}",
            "}",
            "$0"
        ]
    },
	"t-pipe: close-list-father": {
        "prefix": "t-pipe: close-list-father",
        "body": [
            "// Chiusura lati di scrittura inutilizzati",
            "for(int ${1:k} = 0; ${1:k} < ${2:N}; ${1:k}++)",
            "{",
			"\tclose(${3:piped}[${1:k}][1]);",
            "}",
            "$0"
        ]
    },
	"t-pipe: close-list-child": {
        "prefix": "t-pipe: close-list-child",
        "body": [
            "// Chiusura lati di lettura/scrittura inutilizzati",
            "for(int ${1:k} = 0; ${1:k} < ${2:N}; ${1:k}++)",
            "{",
			"\tclose(${3:piped}[${1:k}][0]);",
			"\tif(${1:k} != ${4:i}){",
			"\t\tclose(${3:piped}[${1:k}][1]);",
            "\t}",
            "}",
            "$0"
        ]
    },
    "t-fork: single-child": {
        "prefix": "t-fork: single-child",
        "body": [
            "// Generazione di un processo ${1:figlio} e controllo esito",
            "if ((${2:pid} = fork()) < 0)",
            "{",
            "\tprintf(\"Errore in fork.\\n\");",
            "\texit(${3: });",
            "}",
            "",
            "if(${2:pid} == 0)",
            "{",
            "\t/*Codice del processo ${4:figlio}*/",
            "}",
            "$0"
        ]
    },
    "t-fork: multiple-child": {
        "prefix": "t-fork: multiple-child",
        "body": [
            "// Generazione dei processi ${1:figli}",
			"for(int ${2:i} = 0; ${2:i} < ${3:N}; ${2:i}++)",
            "{",
            "\t// Esecuzione della fork e controllo esito",
			"\tif((${4:pid} = fork()) < 0)",
            "{",
			"\t\tprintf(\"Errore in fork.\\n\");",
			"\t\texit(${5: });",
			"\t}",
			"",
            "\tif(${4: pid} == 0){",
            "\t\t/* Codice del processo ${6:figlio} */",
            "",
            "\t}",
            "}",
            "$0"
        ]
    },
	"t-wait: single-child": {
        "prefix": "t-wait: single-child",
        "body": [
            "// Attesa del processo ${1:figlio}",
			"if((${2:pidFiglio} = wait(&${3:status})) < 0)",
            "{",
			"\tprintf(\"Errore in wait eseguita dal ${4:padre}.\\n\");",
			"\texit(${5: });",
            "}",
			"",
			"//Controllo su terminazioni anomale del ${1:figlio} e valore di ritorno",
			"if((${3:status} & 0xFF) != 0)",
            "{",
			"\tprintf(\"${6:Figlio} con PID = %d terminato in modo anomalo\\n\", ${2:pidFiglio});",
			"}",
			"else{",
			"\tritorno = (${3:status} >> 8) & 0xFF;",
			"\tprintf(\"${6:Figlio} con PID = %d ha ritornato %d (255 = errori)\\n\", ${2:pidFiglio}, ritorno);",
			"}",
            "$0"
        ]
    },
	"t-wait: multiple-child": {
        "prefix": "t-wait: multiple-child",
        "body": [
            "//Attesa dei processi ${1:figli}",
			"for(int ${2:i} = 0; ${2:i} < ${3:N}; ${2:i}++)",
            "{",
            "\t//Esecuzione della wait e controllo esito",
			"\tif((${4:pidFiglio} = wait(&${5:status})) < 0)",
            "\t{",
			"\t\tprintf(\"Errore in wait eseguita dal ${6:padre}\\n\");",
			"\t\texit(${7: });",
			"\t}",
			"",
			"\t//Controllo su terminazioni anomale del figlio e valore di ritorno",
			"\tif((${5:status} & 0xFF) != 0)",
            "\t{",
			"\t\tprintf(\"${8:Figlio} con PID = %d terminato in modo anomalo\\n\", ${4:pidFiglio});",
			"\t}",
			"\telse",
            "\t{",
			"\t\tritorno = (${5:status} >> 8) & 0xFF;",
			"\t\tprintf(\"${8:Figlio} con PID = %d ha ritornato %d (255 = errori)\\n\", ${4:pidFiglio}, ritorno);",
			"\t}",
            "}",
            "$0"
        ]
    },
    "t-open: openfile": {
        "prefix": "t-open: openfile",
        "body": [
            "// Apertura del file e controllo esito",
			"if((fd = open(argv[${1:n+1}], ${2:O_RDONLY})) < 0)",
            "{",
			"\tprintf(\"Errore nell'apertura del file '%s'.\\n\", argv[${1:n+1}]);",
			"\texit(${3: });",
            "}",
            "$0"
        ]
    },
    "t-creat: createfile": {
        "prefix": "t-creat: createfile",
        "body": [
            "// Creazione del file ${1:NOMEFILE}",
            "if((fdout = creat(\"${2:PATH}\", 0644)) < 0)",
            "{",
            "\tprintf(\"Errore nella creazione del file\\n\");",
            "\texit(${3: });",
            "}",
            "$0"
        ]
    },
    "t-exec: exec-fail": {
        "prefix": "t-exec: exec-fail",
        "body": [
            "// Codice che viene eseguito solo in caso di fallimento della exec",
            "printf(\"Errore in exec!\\n\");",
            "exit(-1);",
            "$0"
        ]
    },
    "t-read: readline": {
        "prefix": "t-read: readline",
        "body": [
            "//Lettura di ciascun carattere del file linea del file",
            "int ${1:j} = 0;",
            "while(read(fd, &(${2:linea}[${1:j}]), 1) != 0)",
            "{",
            "\t//Trovato il termine di una linea",
            "\tif(${2:linea}[${1:j}] == '\\n')",
            "\t{",
            "",
            "\t\t${3:/* Code */}",
            "",
            "\t\t${1:j} = 0;",
            "\t}",
            "\telse",
            "\t{",
            "\t\t//Aggiornamento indice",
            "\t\t${1:j}++;",
            "\t}",
            "}",
            "$0"
        ]
    },
    "t-read: readchar": {
        "prefix": "t-read: readchar",
        "body": [
            "//Lettura di ciascun carattere del file del file",
            "int ${1:j} = 0;",
            "while(read(fd, &${2:ch}, 1) != 0){",
            "\t//Trovato il termine di una linea",
            "\tif(${2:ch} == '\\n')",
            "{",
            "",
            "\t\t${3:/* Code */}",
            "",
            "\t\t${1:j} = 0;",
            "\t}",
            "\telse{",
            "\t\t//Aggiornamento indice",
            "\t\t${1:j}++;",
            "\t}",
            "}",
            "$0"
        ]
    },
    "t-pipeline: readfrom": {
        "prefix": "t-pipeline: readfrom",
        "body": [
            "//Lettura struttura dati proveniente da pipe e controllo esito",
            "nr = read(${1:pipe}, ${2:name}, ${3:size});",
            "if(nr != ${3:size})",
            "{",
            "\tprintf(\"Errore nella read da pipe con indice %d\\n\", ${4:n});",
            "\texit(${5: });",
            "}",
            "$0"
        ]
    },
    "t-pipeline: writeon": {
        "prefix": "t-pipeline: writeon",
        "body": [
            "//Scrittura struttura dati su pipe e controllo esito",
            "nw = write(${1:pipe}, ${2:name}, ${3:size});",
            "if(nw != ${3:size})",
            "{",
            "\tprintf(\"Errore nella scrittura su pipe con indice %d\\n\", ${4:n});",
            "\texit(${5: });",
            "}",
            "$0"
        ]
    },
    "t-pipeline: close-list-father": {
        "prefix": "t-pipeline: close-list-father",
        "body": [
            "// Chiusura lati di pipe inutilizzati",
            "for(int ${1:k} = 0; ${1:k} < ${2:N}; ${1:k}++)",
            "{",
            "\tif(${1:k} != ${2:N}-1)",
			"\t\tclose(${3:piped}[${1:k}][0]);",
            "",
            "\tclose(${3:piped}[${1:k}][1]);",
            "}",
            "$0"
        ]
    },
	"t-pipeline: close-list-child": {
        "prefix": "t-pipeline: close-list-child",
        "body": [
            "// Chiusura lati di pipe inutilizzati",
            "for(int ${1:k} = 0; ${1:k} < ${2:N}; ${1:k}++)",
            "{",
            "\tif(${4:i} == 0 || ${1:k} != ${4:i}-1)",
			"\t\tclose(${3:piped}[${1:k}][0]);",
			"\tif(${1:k} != ${4:i})",
			"\t\tclose(${3:piped}[${1:k}][1]);",
            "}",
            "$0"
        ]
    },
    "t-ring: close-list-father": {
        "prefix": "t-ring: close-list-father",
        "body": [
            "// Chiusura lati di pipe inutilizzati",
            "for(int ${1:k} = 0; ${1:k} < ${2:N}; ${1:k}++)",
            "{",
			"\tclose(${3:piped}[${1:k}][0]);",
            "\tclose(${3:piped}[${1:k}][1]);",
            "}",
            "$0"
        ]
    },
	"t-ring: close-list-child": {
        "prefix": "t-ring: close-list-child",
        "body": [
            "// Chiusura lati di pipe inutilizzati",
            "for(int ${1:k} = 0; ${1:k} < ${2:N}; ${1:k}++)",
            "{",
			"\tif(${1:k} != ${4:i}){",
			"\t\tclose(${3:piped}[${1:k}][0]);",
            "\t}",
            "\tif(${1:k} != (${4:i}+1)%${2:N}){",
			"\t\tclose(${3:piped}[${1:k}][1]);",
            "\t}",
            "}",
            "$0"
        ]
    }
}